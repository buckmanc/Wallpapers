#!/usr/bin/env bash

if [[ -z "$QUERY_STRING" ]]
then
    QUERY_STRING="$@"
fi

gitroot="$(pwd | grep -iPo '^.+/wallpapers(?=(/|$))')"

# easy access to those url encode/decode functions
export PATH="${PATH}:$gitroot/.internals/cgi-bin/"

echo "Content-type: text/html"
echo
echo "<title>Test CGI</title>"
echo "<p>Hello World!</p>"
echo "<br>"
echo "<p>whoami: $(whoami)</p>"
echo "<p>query string: $QUERY_STRING</p>"
echo "<p>write test: $(echo "$QUERY_STRING" >> "$gitroot/.internals/cgi-bin/args.log")</p>"
echo "<p>args logged? $?<p>"
echo "<p>log read test: $(cat "$gitroot/.internals/cgi-bin/args.log")</p>"
echo "<p>file logged? $?<p>"

# IFS='&=' read -ra parm <<<"$QUERY_STRING"

# destName="$parm[destname]"
# destName="$(echo "${destName,,}" | sed 's/[ ]/_/g')"
# echo "<p>parm: $parm</p>"
# echo "<p>destName: $destName</p>"

declare -A param   
while IFS='=' read -r -d '&' key value && [[ -n "$key" ]]; do
    # param["$key"]=$value
    # param["$key"]=$(echo $value | sed 's/\(+\|%20\)/ /g')
    param["$key"]="$(echo "$value" | urldecode | sed 's/+/ /g')"
done <<<"${QUERY_STRING}&"


echo "<hr>"
echo "<p>decoded query params:</p>"
echo "decoded query params:" >> "$gitroot/.internals/cgi-bin/args.log"

for i in "${!param[@]}"
do
    demo="$i: ${param[$i]}"
    echo "<p>$demo</p>"
    echo "$demo" >> "$gitroot/.internals/cgi-bin/args.log"
done

# TODO validate with a simple provided token here
# nothing fancy

echo "<hr>"

# git config --global --add safe.directory /media/content/Wallpapers
fileExt="${param[sourcename]##*.}"

destName="$(echo "${param[destname],,}" | sed -e 's/ /_/g').$fileExt"
destPath="$gitroot${param[dirname]}/${destName}"
sourcePath="$gitroot${param[dirname]}/${param[sourcename]}"
thumbDest="$gitroot/.internals/thumbnails${param[dirname]}/${destName}"
thumbSource="$gitroot/.internals/thumbnails${param[dirname]}/${param[sourcename]}"
# attrib
attribPath="$(dirname "$destPath")/attrib.md"
dirReadmePath="$(dirname "$destPath")/README.html"
mainReadmePath="$gitroot/README.html"

echo "<p>pwd: $(pwd)</p>"
echo "<p>gitroot: $gitroot</p>"
echo "<p>destName: $destName</p>"
echo "<p>destPath: $destPath</p>"
echo "<p>sourcePath: $sourcePath</p>"
echo "<p>thumbDest: $thumbDest</p>"
echo "<p>thumbSource: $thumbSource</p>"
echo "<p>attribPath: $attribPath</p>"
echo "<p>dirReadmePath: $dirReadmePath</p>"
echo "<p>mainReadmePath: $mainReadmePath</p>"

filereplace(){
    filePath="$1"
    oldText="$2"
    newText="$3"

    if grep -iq "$oldText" "$filePath"
    then
        fileText=$(cat "$filePath")
        fileText="${fileText//$oldText/$newText}"
        echo "$fileText" > "$filePath"
    else
        echo "<p>$filePath does not contain $oldText</p>"
    fi
}

if [[ ! -f "$destPath" ]]
then

# make the moves
mv "$sourcePath" "$destPath"
mv "$thumbSource" "$thumbDest"

    filereplace "$attribPath" "${param[sourcename]}" "${destName}"

    filereplace "$dirReadmePath" "\"${param[sourcename]%.*}\"" "\"${destName%.*}\""

    filereplace "$dirReadmePath" "${param[sourcename]}" "${destName}"
    filereplace "$dirReadmePath" "$(echo -n "${param[sourcename]}" | urlencode)" "$(echo -n "${destName}" | urlencode)"
    filereplace "$dirReadmePath" "$(echo -n "${param[sourcename]}" | urlencode | urlencode)" "$(echo -n "${destName}" | urlencode)"

    filereplace "$mainReadmePath" "${param[sourcename]}" "${destName}"
    filereplace "$mainReadmePath" "$(echo -n "${param[sourcename]}" | urlencode)" "$(echo -n "${destName}" | urlencode)"
    filereplace "$mainReadmePath" "$(echo -n "${param[sourcename]}" | urlencode | urlencode)" "$(echo -n "${destName}" | urlencode)"

fi
